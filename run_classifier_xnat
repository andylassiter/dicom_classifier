#!/bin/bash

# Function to handle errors
handle_error() {
    echo "run_classifier_xnat ERROR: $1"
    exit 1
}

handle_warning() {
    echo "run_classifier_xnat WARNING: $1"
}

# Function to find the first DICOM file in a given directory
get_first_dicom_file() {
  local dicom_dir=$1
  # This will return the first file found in the given directory
  find "$dicom_dir" -type f -name "*.dcm" | head -n 1
}

#input: path
function get_middle_dcm_file () {
    local path=$1
    total=$(find $path -maxdepth 1 -type f -name "*.dcm" | wc -l)
    if (( total<1 )); then return;
    elif (( total==1 )); then
            ls $path/*.dcm
            return
    fi
    local middle=$((total / 2))
    find $path -maxdepth 1 -type f -name "*.dcm" | sort | sed -n "${middle}p"
}

# Function to populate arrays based on directory type
process_directories() {
  local input_dir="$1"
  
  #check for type 0 pattern (single scan)
  if [[ -d "$input_dir/DICOM" ]]; then
        if (( verbose )); then echo "found single scan dir, type 0"; fi
        input_type=0
        #local scan_id=$(basename "$scan_dir")
        #local file_path=$(get_first_dicom_file "$scan_dir/DICOM")
        #local file_path=$(ls $scan_dir/DICOM/*.dcm | tail -1)
        #local file_path=$(find $scan_dir/DICOM/ -maxdepth 1 -type f -name "*.dcm" | head -n 1)
        local file_path=$(get_middle_dcm_file "$input_dir/DICOM")

        if [ ! -f "$file_path" ]; then 
            echo "WARNING: no DICOM files under $input_dir/DICOM, skipping"
            continue
        fi
                
	    if (( verbose )); then 
    	    a=$(ls $input_dir/DICOM | wc); a=($a)
	        echo "middle file path under $input_dir/DICOM (type 2, $a files): $file_path"
	    fi
        type2_array+=("$scan_id,$file_path")
	echo "found 1 DICOM file"
        return
  fi    

  # Check for type 2 pattern (single experiment)
  if [[ -d "$input_dir/SCANS" ]]; then
    for scan_dir in "$input_dir/SCANS"/*; do
      if (( verbose )); then echo "found $scan_dir under SCANS, type 2"; fi
      if [[ -d "$scan_dir/DICOM" ]]; then
	if (( verbose )); then echo "found DICOM dir under $scan_dir, type 2"; fi
        input_type=2
        local scan_id=$(basename "$scan_dir")
        #local file_path=$(get_first_dicom_file "$scan_dir/DICOM")
        #local file_path=$(ls $scan_dir/DICOM/*.dcm | tail -1)
        #local file_path=$(find $scan_dir/DICOM/ -maxdepth 1 -type f -name "*.dcm" | head -n 1)
        local file_path=$(get_middle_dcm_file "$scan_dir/DICOM")

        if [ ! -f "$file_path" ]; then 
            echo "WARNING: no DICOM files under $scan_dir/DICOM, skipping"
            continue
        fi
                
	    if (( verbose )); then 
    	    a=$(ls $scan_dir/DICOM | wc); a=($a)
	        echo "middle file path under $scan_dir/DICOM (type 2, $a files): $file_path"
	    fi
        type2_array+=("$scan_id,$file_path")	
      fi
    done
    echo "found ${#type2_array[@]} DICOM files"
    return
  fi

  local n=0
  #check for type 1 pattern (multiple experiments)
  for dir in "$input_dir"/*; do
    if [[ -d "$dir" ]]; then
      local experiment_label=$(basename "$dir")      
      # Check if it matches type 1 pattern
      if [[ -d "$dir/SCANS" ]]; then	
        for scan_dir in "$dir/SCANS"/*; do
	  if (( verbose )); then echo "found $scan_dir under SCANS, type 1"; fi
          if [[ -d "$scan_dir/DICOM" ]]; then
 	        if (( verbose )); then echo "found DICOM dir with $a files under $scan_dir, type 1"; fi
            input_type=1
            local scan_id=$(basename "$scan_dir")
            #local file_path=$(get_first_dicom_file "$scan_dir/DICOM")
            #local file_path=$(ls $scan_dir/DICOM/*.dcm | tail -1)
            #local file_path=$(find $scan_dir/DICOM/ -maxdepth 1 -type f -name "*.dcm" | head -n 1)
            local file_path=$(get_middle_dcm_file "$scan_dir/DICOM")

            if [ ! -f "$file_path" ]; then 
                echo "WARNING: no DICOM files under $scan_dir/DICOM, skipping"
                continue
            fi
	        if (( verbose )); then 
    	        a=$(ls $scan_dir/DICOM | wc); a=($a)
	            echo "middle file path under $scan_dir/DICOM (type 1, $a files): $file_path"
	        fi
	    if [ -z "${type1_array[$experiment_label]}" ]; then 
		type1_array[$experiment_label]="$scan_id,$file_path"
	    else
	        type1_array[$experiment_label]+=";$scan_id,$file_path"
	    fi
          fi
	  (( n++ ))
	  if (( n % 500 == 0 )); then 
		echo -ne "Found $n files\033[0K\r"
	  fi
        done
      fi
    fi
  done
  echo "Found $n DICOM files"
}

resolve_subject() {
    experiment_label=$1
    subject_label=$(curl -s -b JSESSIONID=$jsession $xnat_server/data/projects/$project_id/experiments/$experiment_label?format=json -X GET -H "Content-Type: application/json" | jq -r '.items[0].data_fields.subject_ID')
    if (( $? )); then handle_error "cannot resolve subject label for $experiment_label"; fi
    echo $subject_label
}

extract_ids() {
    local type="$1"
    local path="$2"
    
    # Remove the /input prefix from the path for easier manipulation
    local trimmed_path="${path#/input}" temp
    
    case "$type" in
        0)
            # Use global variables directly
            SCAN_ID="$scan_id"
            EXPERIMENT_ID="$experiment_id"
            ;;
        2)
            # Extract SCAN_ID from the path
            # Assumes path format: /input/SCANS/<SCAN_ID>/DICOM/<arbitrary string>
            SCAN_ID="${trimmed_path#*/SCANS/}"
            SCAN_ID="${SCAN_ID%%/*}"
            EXPERIMENT_ID="$experiment_id"
            ;;
        1)
            # Extract both SCAN_ID and EXPERIMENT_ID from the path
            # Assumes path format: /input/<EXPERIMENT_ID>/SCANS/<SCAN_ID>/DICOM/<arbitrary string>
            temp="${trimmed_path%%/SCANS/*}"
            EXPERIMENT_ID="${temp##*/}"
            temp="${path##*/SCANS/}"
            SCAN_ID="${temp%%/DICOM/*}"
            ;;
        *)
            echo "Invalid type"
            return 1
            ;;
    esac

    #echo "EXPERIMENT_ID: $EXPERIMENT_ID, SCAN_ID: $SCAN_ID"
}

update_csv_with_tags()
{
	local csv_file="$1" tag_list=($2) temp_file=$(mktemp) tag_list_filtered first_line new_line
	# Create headers for new columns, replacing commas in tags with underscores
	for i in "${!tag_list[@]}"; do tag_list_filtered[$i]=${tag_list[$i]//,/"_"}; done
	local headers=$(IFS=,; echo "${tag_list_filtered[*]}"),experiment,scan    
	echo tag_list: ${tag_list[@]}
	echo tag_list_filtered: ${tag_list_filtered[@]}
	echo headers: $headers
	
    # Add new headers to the temp file
    read -r first_line < $csv_file
    first_line=$(echo "$first_line" | tr -d '\r\n')	
	echo $first_line,$headers > "$temp_file"
	local n fil others tag_values tag_value safe_tag_value
    n=0
    # Skip the header line and process the rest of the file    
    tail -n +2 "$csv_file" | while IFS=, read -r fil others; do
        new_line="$fil,$others"
        tag_values=$(dcminfo_dcmtk "$fil" ${tag_list[@]} -f)
        for tag_value in ${tag_values[@]}; do
            safe_tag_value=$(echo -n "$tag_value" | tr -d '\r\n' | sed 's/,/_/g')
            new_line=$(echo "$new_line" | tr -d '\r\n')
            new_line="${new_line},${safe_tag_value}"
        done
        #set experiment and scan ID's either from the path or globally pre-set variables.
        extract_ids $input_type "$fil"
        ((n++))
        echo -ne "Row $n\033[0K\r"
        # Append the new line to the temp file
        echo "$new_line,$EXPERIMENT_ID,$SCAN_ID" >> "$temp_file"
        #if (( n>3 )); then break; fi
    done
    # Move the temporary file to the original CSV file    
    mv "$temp_file" "$csv_file"
}


if [ -z "$2" ]; then 

	echo "usage: run_classifier_xnat <input dir> <configuration_file> [options]"
	echo "Runs in offline mode unless XNAT credentials and required XNAT fields are specified."
	echo "In online mode, sets the 'scan type' XNAT field to the inferred type."
	echo "The input configuration file must point to correct model, nomenclature and tokenizer files."
	
	echo "Can run on the following directory structures (directory structure conforms to container service mounts):"
    echo "scan directory: <input_dir>/DiCOM/{DICOM files}"
	echo "single experiment directory: <input_dir>/SCANS/{scan ID}/DICOM/{DICOM files}"
	echo "multi-experiment directory: <input_dir>/{experiment ID}/SCANS/{scan ID}/DICOM/{DICOM files}"

	echo "required Python modules (autoencoder_models.py and dependencies) must be accessible under $PYLIB directory"
	
	echo "options:"
	echo "  -output     <directory>         output directory [/output]"
    echo "  -file_index <file>              file listing input DICOM files. Auto-generation is skipped if specified."
	echo "  -jsession   <XNAT JSESSION>     Either this or user/password required in online mode."
	echo "  -server     <XNAT server>       Required in online mode"
	echo "  -project    <XNAT project>      Required in online mode]"
	echo "  -user       <XNAT user>         This or JSESSION is required in online mode"
	echo "  -pass       <XNAT password>     This or JSESSION is required in online mode"
	echo "  -subject    <XNAT subject>      Required for single-experiment mode [online mode]"
	echo "  -experiment <XNAT experiment>   Required for single-experiment mode [online mode]"
    echo "  -scan       <XNAT scan ID>      Required for single-scan mode [online mode]"
	echo "  -verbose    <0|1>               Verbose mode to produce more debug output [0]"
    echo "  -tags_out   \"group1,elem1[;<group2,elem2>;...]\""
    echo "                                  List of DICOM tags to output in the resulting csv"
	
	exit -1
fi

#attempt to guess source directory
if [ -z "$PYLIB" ]; then
    PYLIB="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

if [ ! -f "$PYLIB/autoencoder_models.py" ]; then 
	handle_error "PYLIB environment variable is not defined or does not contain required files (autoencoder_models.py and dependencies)"
fi

# Input arguments
main_input_dir=$1; shift
config_file=$1; shift;
source $config_file
echo "model label: $model_label"
out_dir=/output

verbose=0
file_list_defined=0


tags_out=()

project_id=NA
subject_id=NA
experiment_id=NA
scan_id=NA

while [ -n "$1" ]; do
    case $1 in
        -server)    shift; xnat_server=$1; shift ;;
        -project)   shift; project_id=$1; shift ;;
        -jsession)  shift; jsession_token=$1; shift ;;
        -user)      shift;  xnat_user=$1; shift ;;
        -pass)      shift; xnat_pass=$1; shift ;;
        -subject)   shift; subject_id=$1; shift ;;
        -experiment) shift; experiment_id=$1; shift ;;
        -scan)      shift; scan_id=$1; shift ;;
        -output)    shift; out_dir=$1; shift ;;
        -verbose)   shift; verbose=$1; shift ;;
        -file_index) shift; input_file_list=$1; file_list_defined=1; shift ;;
        -tags_out)  shift; IFS=';' read -r -a tags_out <<< "$1"; shift ;;
        -tag_out)   shift; tags_out+=($1); shift ;;
        *) echo "argument: $1, shifting" shift ;;
    esac
done
if (( file_list_defined == 0 )); then 
    input_file_list=$out_dir/input_file_list.txt    
fi
echo tags_out: "${tags_out[@]}"


if [ ! -d "$out_dir" ]; then
    mkdir -p $out_dir
    if [ ! -d "$out_dir" ]; then
        echo "WARNING: output directory $out_dir does not exist and could not be created. Output dir is created under: `pwd`/output."
        mkdir -p `pwd`/output
        out_dir=`pwd`/output
    fi
fi

if [ ! -f "$model_file" -o ! -f "$nom_file" -o ! -f "$tok_file" ]; then 
	handle_error "One of requred files (model, nomenclature, tokenizer) is missing"
fi
online_mode=0

if [ -n "$xnat_server" -a -n "$xnat_project" ]; then 
    if [ -z "$jsession_token" ]; then 
        jsession_token=$(curl -s -X POST "$xnat_server/data/JSESSION" -u "$xnat_user:$xnat_pass")
        if (( $? )); then handle_error "Cannot connect to $xnat_server"; fi
    fi
fi

#set -x
# Associative array holding experiment->scan_id,first_DICOM_file
declare -A type1_array
# Indexed array holding scan_id,first_DICOM_file 
type2_array=()
type0_array=()
input_type=-1
experiment_list=()
scan_list=()
file_list=()
valid_list=()
echo file_list_defined: $file_list_defined
if (( file_list_defined == 0 )); then 
    echo "Collecting DICOM files."
    process_directories "$main_input_dir"
    if (( input_type==1 )); then
        keys=(${!type1_array[@]})
        for (( i=0; i<${#type1_array[@]}; i++ )); do
            key=${keys[i]}
            entry=${type1_array[$key]}
	    #get the scan list.
	    IFS=';' read -ra scan_list <<< "$entry"
	    for scan in ${scan_list[@]}; do
		    experiment_list+=($key)
	            IFS=',' read -ra tuple <<< "$scan"
	            scan_list+=(${tuple[0]})
        	    file_list+=(${tuple[1]})
	     done
         done
    elif ((input_type==2 || input_type==0)); then
        for entry in ${type2_array[@]}; do
            IFS=',' read -ra tuple <<< "$entry"
            scan_list+=(${tuple[0]})
            file_list+=(${tuple[1]})
        done
    fi

    #echo ${experiment_list[@]}
    if (( verbose )); then 
        echo "detected scans: ${scan_list[@]}"
        echo "detected files to use: ${file_list[@]}"
    fi
    # Check if arrays are populated
    [[ ${#file_list[@]} -eq 0 ]] && handle_error "No DICOM files found."

    #write input files to the list file.
    echo "Writing input file list."
    rm -f $input_file_list
    zipfile=$out_dir/file_list.zip
    for file in "${file_list[@]}"; do
        #echo zip -r $zipfile $file
        #zip -r $zipfile $file
        echo $file >> $input_file_list    
    done
fi
echo 2
determine_modalities=0
if (( determine_modalities )); then 
    echo "Determining modalities."
    # Determine modality for each scan
    declare -a modalities
    for dicom_file in "${file_list[@]}"; do
        line=`dcmdump +P 0008,0060 $dicom_file`;line="${line#*[}";line="${line%]*}"

        modality=$(echo $line | tr '[:upper:]' '[:lower:]')
        if [ -z "$modality" ]; then 
            handle_warning "Failed to determine modality for $dicom_file."
            valid_list+=(0)
        else
            valid_list+=(1)
        fi
        modalities+=("$modality")
    done
fi

echo "Running classifier."
if [ "$model_type" == "foundational" ]; then 
    # Run model to infer scan types
    echo python3 $PYLIB/autoencoder_models.py "--file_list $input_file_list --model_file $model_file --tokenizer_file $tok_file --nomenclature_file $nom_file"
    python3 $PYLIB/autoencoder_models.py --file_list $input_file_list --model_file $model_file --tokenizer_file $tok_file --nomenclature_file $nom_file
elif [ "$model_type" == "fully_connected" ]; then 
    echo python3 $PYLIB/universal_scan_classifier.py "--file_list $input_file_list --model_file $model_file --nomenclature_file $nom_file"
    python3 $PYLIB/universal_scan_classifier.py --file_list $input_file_list --model_file $model_file --nomenclature_file $nom_file
else 
    handle_error "Unknown model type"
fi

tfile=classification_output_${model_label}_`date +%Y%h%d_%H%M%S`.csv
if [ -d "$out_dir" ]; then 
	mv classification_output.csv $out_dir/$tfile
fi

#rcsv classification_output.csv classification_output.sh
#source classification_output.sh
tags_out="${tags_out[@]}"
if [ -n "$tags_out" ]; then
    echo "updating the output csv with requested DICOM tags..."
    update_csv_with_tags "$out_dir/$tfile" "$tags_out"
fi
echo "Done."
exit 0
if (( file_list_defined == 1 )); then 
    echo "XNAT processing will not run since local file list was specified."
    exit 0
fi


[[ ${#labels[@]} -ne ${#file_list[@]} ]] && handle_error "Failed to infer scan types"

#for type1 processing, resolve subject for each experiment
if (( input_type==1 )); then 
    subjects=()
    for experiment in ${!type1_array[*]}; do
        subjects+=(resolve_subject $experiment)
    done
    #upload the resource
    
    
    # Set scan type in XNAT using REST API
    for i in "${!scan_list[@]}"; do
        curl -X PUT "$xnat_server/data/projects/$project_id/subjects/${subjects[i]}/experiments/${experiment_list[i]}/scans/${scan_list[i]}?xsiType=xnat:${modalities[$i]}ScanData&type=${labels[$i]}" \
            -H "Cookie: JSESSIONID=$jsession_token" \
            --fail --silent --show-error || handle_error "Failed to update scan type for projects/$project_id/subjects/${subjects[i]}/experiments/${experiment_list[i]}/scans/${scan_list[i]}"
    done    
else 
    # upload the resource
    
    # Set scan type in XNAT using REST API
    for i in "${!scan_list[@]}"; do
        curl -X PUT "$xnat_server/data/projects/$project_id/subjects/${subject_id}/experiments/${experiment_id}/scans/${scan_list[i]}?xsiType=xnat:${modalities[$i]}ScanData&type=${labels[$i]}" \
            -H "Cookie: JSESSIONID=$jsession_token" \
            --fail --silent --show-error || handle_error "Failed to update scan type for projects/$project_id/subjects/${subject_id}/experiments/${experiment_id}/scans/${scan_list[i]}"
    done
fi

echo "Script completed successfully"
