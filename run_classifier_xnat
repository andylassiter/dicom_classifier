#!/bin/bash

# Function to handle errors
handle_error() {
    echo "dicom_classifier error: $1"
    exit 1
}

if [ -z "$5" ]; then 
	echo "usage: run_classifier_xnat <XNAT experiment dir> <path_to_model_file> <xnat_server> <xnat_project> <xnat_subject> <xnat_experiment> [options]"
	echo "	options:"
	echo "	-model 		<model_file>		model file [/docker_input/model.h5]"
	echo "	-tok 		<tokenizer_file>	tokenizer file [/docker_input/tokenizer.tok]"
	echo "	-nom		<nomenclature_file>	nomenclature json file [/docker_input/nomenclature.json]"
	echo "	-jsession 	<JSESSION ID>		XNAT's JSESSION. May be supplied instead of user/password."
	echo "	-user		<user>			XNAT user"
	echo "	-pass		<password>		XNAT password"
	exit -1
fi

# Input arguments
main_input_dir=$1; shift
xnat_server=$1; shift
project_id=$1; shift
subject_id=$1; shift
experiment_id=$1; shift

case $1 in 
    -model) shift; model_file=$1; shift ;;
    -nom)   shift; nom_file=$1; shift ;;
    -tok)   shift; tok_file=$1; shift ;;
    -jsession) shift; jsession_token=$1; shift ;;
    -user)  shift;  xnat_user=$1; shift ;;
    -pass)  shift; xnat_pass=$1; shift ;;
    *)  shift ;;
esac

if [ ! -f "$model_file" -o ! -f "$nom_file" -o ! -f "$tok_file" ]; then 
	handle_error "One of requred files (model, nomenclature, tokenizer) is missing"
fi

if [ -n "$xnat_user" -a -n "$xnat_pass" ]; then 
    jsession_token=$(curl -s -X POST "$xnat_server/data/JSESSION" -u "$xnat_user:$xnat_pass")
    if (( $? )); then handle_error("Cannot connect to $xnat_server"); fi
fi

# Arrays to hold scan IDs and DICOM file paths
declare -a scan_ids
declare -a dicom_files

# Populate arrays with scan IDs and DICOM file paths
while IFS=  read -r -d $'\0'; do
    scan_id=$(basename $(dirname $(dirname $(dirname $REPLY))))
    scan_ids+=("$scan_id")
    dicom_files+=("$REPLY")
done < <(find "$main_input_dir" -type f -name "*.dcm" -print0)

# Check if arrays are populated
[[ ${#scan_ids[@]} -eq 0 ]] && handle_error "No DICOM files found"

# Determine modality for each scan
declare -a modalities
for dicom_file in "${dicom_files[@]}"; do
    modality=$(dcminfo_dcmtk 0008,0060 "$dicom_file" | tr '[:upper:]' '[:lower:]')
    [[ -z "$modality" ]] && handle_error "Failed to determine modality for $dicom_file"
    modalities+=("$modality")
done

# Run autoencoder_models.py to infer scan types
echo python3 autoencoder_models.py "${dicom_files[@]}" --model_file $model_file --tokenizer_file $tok_file --nomenclature_file $nom_file
scan_types=($(python3 autoencoder_models.py "${dicom_files[@]}" --model_file $model_file --tokenizer_file $tok_file --nomenclature_file $nom_file))

[[ ${#scan_types[@]} -ne ${#dicom_files[@]} ]] && handle_error "Failed to infer scan types"

# Set scan type in XNAT using REST API
for i in "${!scan_ids[@]}"; do
    curl -X PUT "$xnat_server/data/projects/$project_id/subjects/$subject_id/experiments/$experiment_id/scans/${scan_ids[$i]}?xsiType=xnat:${modalities[$i]}ScanData&type=${scan_types[$i]}" \
        -H "Cookie: JSESSIONID=$jsession_token" \
        --fail --silent --show-error || handle_error "Failed to update scan type for ${scan_ids[$i]}"
done

echo "Script completed successfully"

